#include "Ast.h"
#include <stack>
#include <string>
#include "IRBuilder.h"
#include "Instruction.h"
#include "SymbolTable.h"
#include "Type.h"
#include "Unit.h"
extern Unit unit;
extern MachineUnit mUnit;

#include <iostream>

extern FILE* yyout;
int Node::counter = 0;
IRBuilder* Node::builder;
Type *funcRetType = nullptr;
bool haveRet = false;

inline int getSymboltableLabel(){
    return SymbolTable::getLabel();
}

void Node::backPatch(std::vector<Instruction*>& list, BasicBlock* bb) {
    for (auto& inst : list) {
        if (inst->isCond())
            dynamic_cast<CondBrInstruction*>(inst)->setTrueBranch(bb);
        else if (inst->isUncond())
            dynamic_cast<UncondBrInstruction*>(inst)->setBranch(bb);
    }
}

std::vector<Instruction*> Node::merge(std::vector<Instruction*>& list1,
                                      std::vector<Instruction*>& list2) {
    std::vector<Instruction*> res(list1);
    res.insert(res.end(), list2.begin(), list2.end());
    return res;
}

void Ast::genCode(Unit* unit) {
    IRBuilder* builder = new IRBuilder(unit);
    Node::setIRBuilder(builder);
    root->genCode();
}

void FunctionDef::genCode() {
    Unit *unit = builder->getUnit();
    Function *func = new Function(unit, se);
    BasicBlock *entry = func->getEntry();
    builder->setInsertBB(entry);

    if(this->decl)
        decl->genCode();
    if(this->stmt)
        stmt->genCode();

    for(auto bb=func->begin();bb!=func->end();bb++){
        // jmp only happen at the end of a block
        Instruction* ins_begin=(*bb)->begin();
        Instruction* ins_end=(*bb)->rbegin();

        //detele the wrong jump inst in the block
        while (ins_begin!=ins_end)
        {
            if(ins_begin->isCond()||ins_begin->isUncond()){
                (*bb)->remove(ins_begin);
            }
            ins_begin=ins_begin->getNext();
        }
        if(ins_end->isCond()){
            //设置好truebranch和falsebranch
            BasicBlock* truebranch, *falsebranch;
            truebranch = ((CondBrInstruction*)(ins_end))->getTrueBranch();
            if(truebranch->empty()){
                if (((FunctionType*)(se->getType()))->getRetType() == TypeSystem::intType) {
                    new RetInstruction(new Operand(new ConstantSymbolEntry(TypeSystem::intType, 0)),truebranch);
                } else if (((FunctionType*)(se->getType()))->getRetType() == TypeSystem::voidType) {
                    new RetInstruction(nullptr, truebranch);
                }
            }
            falsebranch = ((CondBrInstruction*)(ins_end))->getFalseBranch();
            if(falsebranch->empty()){
                if (((FunctionType*)(se->getType()))->getRetType() == TypeSystem::intType) {
                    new RetInstruction(new Operand(new ConstantSymbolEntry(TypeSystem::intType, 0)),falsebranch);
                }else if (((FunctionType*)(se->getType()))->getRetType() == TypeSystem::voidType) {
                    new RetInstruction(nullptr, falsebranch);
                }
            }
            truebranch->addPred((*bb));
            falsebranch->addPred((*bb));
            (*bb)->addSucc(falsebranch);
            (*bb)->addSucc(truebranch);
            
        }
        else if(ins_end->isUncond()){
            BasicBlock* branch = ((UncondBrInstruction*)(ins_end))->getBranch();
            branch->addPred((*bb));
            (*bb)->addSucc(branch);

            if(branch->empty()){
                if (((FunctionType*)(se->getType()))->getRetType() == TypeSystem::intType) {
                    new RetInstruction(new Operand(new ConstantSymbolEntry(TypeSystem::intType, 0)),branch);
                }else if (((FunctionType*)(se->getType()))->getRetType() == TypeSystem::voidType) {
                    new RetInstruction(nullptr, branch);
                }
            }
        }
        else if(!ins_end->isRet()){
            if (((FunctionType*)(se->getType()))->getRetType() == TypeSystem::voidType) {
                new RetInstruction(nullptr, *bb);
            }
        }
    }

}

void BinaryExpr::genCode() {
    BasicBlock* bb = builder->getInsertBB();
    Function* func = bb->getParent();
    if (op == AND) {
        BasicBlock *trueBB = new BasicBlock(func);  // if the result of lhs is true, jump to the trueBB.
        expr1->genCode();
        backPatch(expr1->trueList(), trueBB);
        builder->setInsertBB(trueBB);               // set the insert point to the trueBB so that intructions generated by expr2 will be inserted into it.
        expr2->genCode();
        true_list = expr2->trueList();
        false_list = merge(expr1->falseList(), expr2->falseList());

    } else if (op == OR) {
        // Todo
        BasicBlock *trueBB = new BasicBlock(func);
        expr1->genCode();
        backPatch(expr1->falseList(), trueBB);
        builder->setInsertBB(trueBB);
        expr2->genCode();
        true_list = merge(expr1->trueList(), expr2->trueList());
        false_list = expr2->falseList();
    } else if (op >= LESS && op <= NOTEQUAL) {
        // Todo
        expr1->genCode();
        expr2->genCode();
        Operand* src1 = expr1->getOperand();
        Operand* src2 = expr2->getOperand();
        if (src1->getType()->isBool()) {
            TemporarySymbolEntry*te=new TemporarySymbolEntry(TypeSystem::intType, SymbolTable::getLabel());
            Operand* dst = new Operand(te);
            new ZextInstruction(dst, src1, bb);
            src1 = dst;
        }
        if (src2->getType()->isBool()) {
            TemporarySymbolEntry*te=new TemporarySymbolEntry(TypeSystem::intType, SymbolTable::getLabel());
            Operand* dst = new Operand(te);
            new ZextInstruction(dst, src2, bb);
            src2 = dst;
        }

        int cmpOp = -9;
        switch (op) {
            case GREAT:
                cmpOp = CmpInstruction::G;
                break;
            case LESS:
                cmpOp = CmpInstruction::L;
                break;
            case GREATEQUAL:
                cmpOp = CmpInstruction::GE;
                break;
            case LESSEQUAL:
                cmpOp = CmpInstruction::LE;
                break;
            case EQUAL:
                cmpOp = CmpInstruction::E;
                break;
            case NOTEQUAL:
                cmpOp = CmpInstruction::NE;
                break;
        }
        new CmpInstruction(cmpOp, dst, src1, src2, bb);
        BasicBlock * tb=new BasicBlock(func);
        BasicBlock * fb = new BasicBlock(func);
        BasicBlock * ttb = new BasicBlock(func);
        true_list.push_back(new CondBrInstruction(tb, ttb, dst, bb));
        false_list.push_back(new UncondBrInstruction(fb, ttb));

    } else if (op >= ADD && op <= MOD) {

        expr1->genCode();
        expr2->genCode();

        Operand* op1 = expr1->getOperand();
        Operand* op2 = expr2->getOperand();

        int opcode = 9;
        switch (op) {

            case ADD:
                opcode = BinaryInstruction::ADD;
                break;

            case SUB:
                opcode = BinaryInstruction::SUB;
                break;

            case MUL:
                opcode = BinaryInstruction::MUL;
                break;

            case DIV:
                opcode = BinaryInstruction::DIV;
                break;

            case MOD:
                opcode = BinaryInstruction::MOD;
                break;
        }

        new BinaryInstruction(opcode, dst, op1, op2, bb);
    }

}

void Constant::genCode() {
    // we don't need to generate code.
}

void Id::genCode() {

    BasicBlock* bb = builder->getInsertBB();
    Operand* op1 = ((IdentifierSymbolEntry*)(symbolEntry))->getAddr();

    if (type->isInt())
        new LoadInstruction(dst, op1, bb);
    else if (type->isArray()) {
        //curr add is the add of a,we need to find the real add of a[][]
        if (arrayIndices) {
            Type* elementType = (dynamic_cast<ArrayType*>(this->type))->getElementType();
            Type* cur = this->type;
            ExprNode* arr = arrayIndices;
            Operand* _src = op1;
            Operand* _dst = dst;
            bool paramFirst = false;
            bool ptr= false;
            bool firstFlag = true;
            while (arr) {
                if (((ArrayType*)cur)->getLength() < 0) {
                    //load it
                    PointerType* pt =new PointerType(elementType);
                    TemporarySymbolEntry*te=new TemporarySymbolEntry(pt,SymbolTable::getLabel());
                    _src = new Operand(te);
                    new LoadInstruction(_src, op1, bb);
                    paramFirst = true;
                    firstFlag = false;
                }

                arr->genCode();
                Operand* tempo=arr->getOperand();
                auto gep = new GepInstruction(_dst, _src, tempo, bb, paramFirst);
                if (!paramFirst && firstFlag) {
                    gep->setFirst();
                    firstFlag = false;
                }
                if (paramFirst)
                    paramFirst = false;

                if (elementType == TypeSystem::intType || elementType == TypeSystem::constIntType){
                    ptr = false;
                    break;
                }
                elementType = ((ArrayType*)elementType)->getElementType();
                cur = ((ArrayType*)cur)->getElementType();
                _src = _dst;
                PointerType* pt =new PointerType(elementType);
                TemporarySymbolEntry*te=new TemporarySymbolEntry(pt,SymbolTable::getLabel());
                _dst = new Operand(te);
                arr = (ExprNode*)(arr->getNext());

                if (!arr) {
                    ConstantSymbolEntry*cs = new ConstantSymbolEntry(TypeSystem::intType, getZero());
                    Operand* idx = new Operand(cs);
                    new GepInstruction(_dst, _src, idx, bb);
                    ptr = true;
                    break;
                }
            }
            dst = _dst;
            //如果不是左值
            //取到地址后需要将数组内容load进入寄存器
            if (!left && !ptr) {
                TemporarySymbolEntry*te=new TemporarySymbolEntry(TypeSystem::intType, getSymboltableLabel());
                Operand* temp = new Operand(te);
                new LoadInstruction(temp, dst, bb);
                dst = temp;
            }

        } else {
            //只是一个数组指针的情况
            //is a pointer
            if (((ArrayType*)(this->type))->getLength() < 0) {
                PointerType*pt=new PointerType(((ArrayType*)(this->type))->getElementType());
                TemporarySymbolEntry*te=new TemporarySymbolEntry(pt, getSymboltableLabel());
                Operand* temp = new Operand(te);
                new LoadInstruction(temp, op1, bb);
                dst = temp;
            } else {
                ConstantSymbolEntry*cs=new ConstantSymbolEntry(TypeSystem::intType, getZero());
                Operand* idx = new Operand(cs);
                auto gep = new GepInstruction(dst, op1, idx, bb);
                gep->setFirst();
            }
        }
    }
}

void DeclStmt::genCode() {
    IdentifierSymbolEntry*se = (IdentifierSymbolEntry*)(id->getSymbolEntry());
    if (se->isGlobal()) {
        SymbolEntry* se2=new IdentifierSymbolEntry(*se);
        se2->setType(new PointerType(se->getType()));
        Operand* op = new Operand(se2);
        se->setAddr(op);
        unit.insertGlobal(se);
        //别忘了这个
        mUnit.insertGlobal(se);
    }
    else if (se->isLocal() || se->isParam()) {
        Function *func = builder->getInsertBB()->getParent();
        BasicBlock *entry = func->getEntry();
        Type *type = new PointerType(se->getType());
        SymbolEntry *addr_se=new TemporarySymbolEntry(type, SymbolTable::getLabel());
        Operand *addr = new Operand(addr_se);
        Instruction *alloca = new AllocaInstruction(addr, se);            
        entry->insertFront(alloca);                                 
        Operand* paramAddr = nullptr;
        if(se->isParam()){
            paramAddr = se->getAddr();
            se->setAddr(addr);     
        }else{
            se->setAddr(addr);   
        }                                                 
        if (expr) {
            if (expr->isArrayInitList()) {
                //寻址初始化
                Operand* init = nullptr;
                BasicBlock* bb = builder->getInsertBB();
                ExprNode* temp = expr;
                std::stack<ExprNode*> stk;
                std::vector<int> idx;
                addZero(idx,1);
                while (temp) {
                    if (temp->isArrayInitList()) {
                        stk.push(temp);
                        addZero(idx,1);
                        temp = ((ArrayInitList*)(temp))->getExpr();
                        continue;
                    } else {
                        temp->genCode();
                        Type* type = ((ArrayType*)(se->getType()))->getElementType();
                        //Type* type = (dynamic_cast<ArrayType*>(se->getType()))->getElementType();
                        Operand* _src = addr;
                        Operand* _dst;
                        Operand* index;
                        bool firstFlag = true;
                        int i = 1;
                        while (true) {
                            PointerType* pt1=new PointerType(type);
                            TemporarySymbolEntry* ts1 = new TemporarySymbolEntry(pt1,getSymboltableLabel());
                            _dst= new Operand(ts1);                           
                            ConstantSymbolEntry* cs1 = new ConstantSymbolEntry(TypeSystem::intType, getvi(idx,i++));
                            Operand* op = (new Constant(cs1))->getOperand();
                            index=op;
                            auto gep = new GepInstruction(_dst, _src, index, bb);
                            gep->setInitOperand(init);
                            if (firstFlag) {
                                gep->setFirst();
                                firstFlag = false;
                            }
                            if (type == TypeSystem::intType || type == TypeSystem::constIntType){
                                gep->setLast();
                                init = _dst;
                                break;
                            }
                            type = ((ArrayType*)type)->getElementType();
                            _src = _dst;
                        }
                        new StoreInstruction(_dst, temp->getOperand(), bb);
                    }
                    while (true) {
                        if (temp->getNext()) {
                            temp = (ExprNode*)(temp->getNext());
                            idx.at(idx.size()-1)+=1;
                            //idx[idx.size() - 1]++;
                            break;
                        } else {
                            temp = stk.top();
                            stk.pop();
                            idx.pop_back();
                            if (stk.empty())
                                break;
                        }
                    }
                    if (stk.empty())
                        break;
                }
            } else {
                BasicBlock* bb = builder->getInsertBB();
                expr->genCode();
                Operand* src = expr->getOperand();
                new StoreInstruction(addr, src, bb);
            }
        }
        if (se->isParam()) {
            BasicBlock* bb = builder->getInsertBB();
            new StoreInstruction(addr, paramAddr, bb);
        }
    }
    if (this->getNext()) {
        this->getNext()->genCode();
    }
}

void AssignStmt::genCode() {
    BasicBlock* bb = builder->getInsertBB();
    expr->genCode();
    Operand* op = nullptr;
    if (lval->getTopType()->isInt())
        op = ((IdentifierSymbolEntry*)(lval->getSymbolEntry()))->getAddr();
    else if (lval->getTopType()->isArray()) {
        //把左值弄好
        ((Id*)lval)->setLeft();
        //左值生成代码
        lval->genCode();
        //拿到操作数
        op = lval->getOperand();
    }
    Operand* op2 = expr->getOperand();
    new StoreInstruction(op, op2, bb);
}


void IfStmt::genCode() {
    Function *f=builder->getInsertBB()->getParent();
    BasicBlock*tb=new BasicBlock(f);
    BasicBlock*eb= new BasicBlock(f);
    cond->genCode();
    backPatch(cond->trueList(), tb);
    backPatch(cond->falseList(), eb);

    builder->setInsertBB(tb);
    thenStmt->genCode();
    tb = builder->getInsertBB();
    new UncondBrInstruction(eb, tb);

    builder->setInsertBB(eb);

}

void IfElseStmt::genCode() {
    // Todo
    Function *f=builder->getInsertBB()->getParent();
    BasicBlock *tb=new BasicBlock(f);
    BasicBlock *eb=new BasicBlock(f);//else
    BasicBlock *eeb=new BasicBlock(f);//end
 

    cond->genCode();
    backPatch(cond->falseList(), eb);
    backPatch(cond->trueList(), tb);


    builder->setInsertBB(tb);
    thenStmt->genCode();
    tb = builder->getInsertBB();
    new UncondBrInstruction(eeb, tb);


    builder->setInsertBB(eb);
    elseStmt->genCode();
    eb = builder->getInsertBB();
    new UncondBrInstruction(eeb, eb);


    builder->setInsertBB(eeb);
}

void CompoundStmt::genCode() {
    // Todo
    if (stmt)
        stmt->genCode();
}

void SeqNode::genCode() {
    // Todo
    stmt1->genCode();
    stmt2->genCode();
}

void ReturnStmt::genCode() {
    BasicBlock* bb = builder->getInsertBB();
    Operand* op = nullptr;
    if (this->retValue!=nullptr) {
        //生成代码
        this->retValue->genCode();
        //拿操作数
        op = this->retValue->getOperand();
    }
    new RetInstruction(op, bb);
}
void ExprStmt::genCode() {
    // Todo
    expr->genCode();
}
void ContinueStmt::genCode() {
    // Todo
    BasicBlock* bb = builder->getInsertBB();
    BasicBlock*cb=((WhileStmt*)whileStmt)->get_cond_bb();
    new UncondBrInstruction(cb, bb);
    Function* f = builder->getInsertBB()->getParent();
    BasicBlock* next_bb = new BasicBlock(f);
    builder->setInsertBB(next_bb);
}
void BreakStmt::genCode() {
    // Todo
    BasicBlock* bb = builder->getInsertBB();
    BasicBlock*cb=((WhileStmt*)whileStmt)->get_end_bb();
    new UncondBrInstruction(cb, bb);
    Function* f = builder->getInsertBB()->getParent();
    BasicBlock* next_bb = new BasicBlock(f);
    builder->setInsertBB(next_bb);
}
void WhileStmt::genCode() {
    Function* f = builder->getInsertBB()->getParent();
    BasicBlock *bb=builder->getInsertBB();
    BasicBlock *cond_bb=new BasicBlock(f); 
    this->setCondBB(cond_bb);
    new UncondBrInstruction(cond_bb, bb);
    BasicBlock *while_bb=new BasicBlock(f); 
    BasicBlock *end_bb=new BasicBlock(f);
    this->setEndBB(end_bb);
    builder->setInsertBB(cond_bb);
    this->cond->genCode();
    backPatch(cond->falseList(),end_bb);
    backPatch(cond->trueList(),while_bb);
    builder->setInsertBB(while_bb);
    this->stmt->genCode();
    while_bb = builder->getInsertBB();
    new UncondBrInstruction(cond_bb,while_bb);
    builder->setInsertBB(end_bb);
}

void ArrayInitList::genCode() {
    // Todo
}
void FuncExpr::genCode() {
    std::vector<Operand*> os;
    ExprNode* expr = param;
    while (expr) {
        expr->genCode();
        Operand*op=expr->getOperand();
        os.push_back(op);
        expr = (ExprNode*)expr->getNext();
    }
    BasicBlock* bb = builder->getInsertBB();
    new CallInstruction(dst, symbolEntry, os, bb);

}
void UnaryExpr::genCode() {
    // Todo
    expr->genCode();
    BasicBlock* bb = builder->getInsertBB();
    Type* ut = expr->getType();
    Operand* o1, *o2;
    switch (op)
    {
    case SUB:
        o1 = new Operand(new ConstantSymbolEntry(TypeSystem::intType, 0));
        if (ut->isBool()) {
            o2 = new Operand(new TemporarySymbolEntry(TypeSystem::intType, SymbolTable::getLabel()));
            new ZextInstruction(o2, expr->getOperand(), bb);
        } else
            o2 = expr->getOperand();
        new BinaryInstruction(BinaryInstruction::SUB, dst, o1, o2, bb);
        break;
    case ADD:
        //如果取正？似乎不用完成
        fprintf(stderr,"not finish yet\n");
        break;
    case NOT:
        o1 = expr->getOperand();
        if (ut->isInt()) {
            TemporarySymbolEntry*te=new TemporarySymbolEntry(TypeSystem::boolType, getSymboltableLabel());
            o2 = new Operand(te);
            new CmpInstruction(CmpInstruction::NE, o2, o1,new Operand(new ConstantSymbolEntry(TypeSystem::intType, 0)),bb);
            o1 = o2;
        }
        new XorInstruction(dst, o1, bb);
    }
}
void ExprNode::genCode() {
    // Todo
}

void Int2BoolExpr::genCode() {
    expr->genCode();
    BasicBlock* bb = builder->getInsertBB();
    Function* func = bb->getParent();
    BasicBlock* truebranch = new BasicBlock(func);
    BasicBlock* tempbranch = new BasicBlock(func);
    BasicBlock* falsebranch = new BasicBlock(func);
    Operand *zero = new Operand(new ConstantSymbolEntry(TypeSystem::intType, 0));
    new CmpInstruction(CmpInstruction::NE, dst, expr->getOperand(), zero, bb);
    Instruction* cond = new CondBrInstruction(truebranch, tempbranch, this->dst, bb);
    
    Instruction* uncond = new UncondBrInstruction(falsebranch, tempbranch);

    trueList().push_back(cond);
    falseList().push_back(uncond);
}

void ContinueStmt::typeCheck() {
    //在parse里检查
}
void BreakStmt::typeCheck() {
    //在parse里检查
}
void WhileStmt::typeCheck() {
    if (stmt)
        stmt->typeCheck();
}

void ArrayInitList::typeCheck() {

}
void FuncExpr::typeCheck() {
    
}
void UnaryExpr::typeCheck() {

}

void ExprStmt::typeCheck() {
   
}

void Ast::typeCheck() {
    if (root != nullptr)
        root->typeCheck();
}

void FunctionDef::typeCheck() {
    haveRet = false;

    SymbolEntry* se = this->getSymbolEntry();
    Type* ret = (dynamic_cast<FunctionType*>(se->getType()))->getRetType();
    funcRetType = ret;

    StmtNode* stmt = this->stmt;
    if (stmt == nullptr) {
        if (ret != TypeSystem::voidType){
            fprintf(stderr, "function does not return a vaild value\n");
            //assert(0);
            return;
        }
    }else
        stmt->typeCheck();

    if(!funcRetType->isVoid() && !haveRet){
        fprintf(stderr, "function \"%s\" shoule return a vaild type\n",this->se->toStr().c_str());
        //assert(0);
        return;
    }

}

void BinaryExpr::typeCheck() {
    if(this->expr1->getType()->isVoid() || this->expr2->getType()->isVoid()){
        fprintf(stderr, "void expr cannot in a BinaryExpr\n");
        assert(false);
    }
}

void Constant::typeCheck() {
    
}

void Id::typeCheck() {
    
}

void IfStmt::typeCheck() {
    if (thenStmt)
        thenStmt->typeCheck();
}

void IfElseStmt::typeCheck() {
    if (thenStmt)
        thenStmt->typeCheck();
    if (elseStmt)
        elseStmt->typeCheck();
}

void CompoundStmt::typeCheck() {
    if (stmt)
        stmt->typeCheck();
}

void SeqNode::typeCheck() {
    if (stmt1)
        stmt1->typeCheck();
    if (stmt2)
        stmt2->typeCheck();
}

void DeclStmt::typeCheck() {
    
}

void ReturnStmt::typeCheck() {
    Type *RetType = this->retValue->getSymbolEntry()->getType();
    if(!funcRetType)
        return;
    if(this->retValue){
        if(this->retValue->getType()->isArray()){
            return;
        }
    }
    if (!retValue && !funcRetType->isVoid()) {
        fprintf(stderr, "you should return %s, but return void\n", funcRetType->toStr().c_str());
        //assert(0);
    }
    if (retValue && funcRetType->isVoid()) {
        fprintf(stderr, "you should return void, but return %s\n",this->retValue->getSymbolEntry()->getType()->toStr().c_str());
        //assert(0);
    }

    if(!this->retValue && funcRetType->isVoid()){
        goto Out;
    }

    if(RetType->isFunc())
        RetType = dynamic_cast<FunctionType*>(RetType)->getRetType();

    if(this->retValue && RetType!=funcRetType){
        if((RetType->isInt() && funcRetType->isInt()))
            goto Out;
        if(this->retValue->getSymbolEntry()->getType()->isFunc())
            return;
        fprintf(stderr, "you should return:%s, but return %s\n",funcRetType->toStr().c_str(), this->retValue->getSymbolEntry()->getType()->toStr().c_str());
        //assert(0);
    }
Out:
    haveRet = true;

}

void AssignStmt::typeCheck() {
    
}

Type* Id::getType() {
    SymbolEntry* se = this->getSymbolEntry();
    if (!se)
        return TypeSystem::voidType;
    Type* type = se->getType();
    if (!arrayIndices)
        return type;
    else if (type->isArray()) {
        ArrayType* temp1 = (ArrayType*)type;
        ExprNode* temp2 = arrayIndices;
        while (!temp1->getElementType()->isInt()) {
            if (!temp2) {
                return temp1;
            }
            temp2  = (ExprNode*)(temp2->getNext());
            temp1 = (ArrayType*)(temp1->getElementType());
        }
        if (!temp2) {
            return temp1;
        }
    }
    return TypeSystem::intType;
}

void ExprNode::output(int level) {
    std::string name, type;
    name = symbolEntry->toStr();
    type = symbolEntry->getType()->toStr();
    fprintf(yyout, "%*cconst string\ttype:%s\t%s\n", level, ' ', type.c_str(), name.c_str());
}

void Ast::output() {
    fprintf(yyout, "program\n");
    if (root != nullptr)
        root->output(4);
}

void BinaryExpr::output(int level) {
    
}

BinaryExpr::BinaryExpr(SymbolEntry* se, int op, ExprNode* expr1, ExprNode* expr2): ExprNode(se), op(op), expr1(expr1), expr2(expr2) {
    dst = new Operand(se);
    std::string op_str;
    switch (op) {
        case ADD:
            op_str = "+";
            break;
        case SUB:
            op_str = "-";
            break;
        case MUL:
            op_str = "*";
            break;
        case DIV:
            op_str = "/";
            break;
        case MOD:
            op_str = "%";
            break;
        case AND:
            op_str = "&&";
            break;
        case OR:
            op_str = "||";
            break;
        case LESS:
            op_str = "<";
            break;
        case LESSEQUAL:
            op_str = "<=";
            break;
        case GREAT:
            op_str = ">";
            break;
        case GREATEQUAL:
            op_str = ">=";
            break;
        case EQUAL:
            op_str = "==";
            break;
        case NOTEQUAL:
            op_str = "!=";
            break;
    }

    //void cannot used in binaryNode
    if (expr1->getType()->isVoid() || expr2->getType()->isVoid()) {
        fprintf(stderr,"void cannot used in binaryNode %s\n", op_str.c_str());
    }
    if (op >= BinaryExpr::AND && op <= BinaryExpr::NOTEQUAL) {
        type = TypeSystem::boolType;
        if (op == BinaryExpr::AND || op == BinaryExpr::OR) {
            if (expr1->getType()->isInt() && expr1->getType()->getSize() == 32) {
                Int2BoolExpr* temp = new Int2BoolExpr(expr1);
                this->expr1 = temp;
            }
            if (expr2->getType()->isInt() && expr2->getType()->getSize() == 32) {
                Int2BoolExpr* temp = new Int2BoolExpr(expr2);
                this->expr2 = temp;
            }
        }
    } else
        type = TypeSystem::intType;
};


int BinaryExpr::getValue() {
    int value = 0;
    switch (op) {
        case ADD:
            value = expr1->getValue() + expr2->getValue();
            break;
        case SUB:
            value = expr1->getValue() - expr2->getValue();
            break;
        case MUL:
            value = expr1->getValue() * expr2->getValue();
            break;
        case DIV:
            if(expr2->getValue())
                value = expr1->getValue() / expr2->getValue();
            break;
        case MOD:
            value = expr1->getValue() % expr2->getValue();
            break;
        case AND:
            value = expr1->getValue() && expr2->getValue();
            break;
        case OR:
            value = expr1->getValue() || expr2->getValue();
            break;
        case LESS:
            value = expr1->getValue() < expr2->getValue();
            break;
        case LESSEQUAL:
            value = expr1->getValue() <= expr2->getValue();
            break;
        case GREAT:
            value = expr1->getValue() > expr2->getValue();
            break;
        case GREATEQUAL:
            value = expr1->getValue() >= expr2->getValue();
            break;
        case EQUAL:
            value = expr1->getValue() == expr2->getValue();
            break;
        case NOTEQUAL:
            value = expr1->getValue() != expr2->getValue();
            break;
    }
    return value;
}

UnaryExpr::UnaryExpr(SymbolEntry* se, int op, ExprNode* expr): ExprNode(se, UNARYEXPR), op(op), expr(expr) {
    std::string op_str;
    switch (op)
    {
    case SUB:
        op_str = "-";
    case NOT:
        op_str = "!";
        break;
    case ADD:
        op_str = "+";
    default:
        break;
    }
    dst = new Operand(se);
    type = TypeSystem::intType;

    if (expr->getType()->isVoid()) {
        fprintf(stderr,"invalid operand of type \'void\' to unary \'opeartor%s\'\n", op_str.c_str());
    }

    if (expr->isUnaryExpr()) {
            UnaryExpr* ue = (UnaryExpr*)expr;
            if (ue->getOp() == UnaryExpr::NOT && ue->getType() == TypeSystem::intType)
                ue->setType(TypeSystem::boolType);
    }
};

void UnaryExpr::output(int level) {

}

int UnaryExpr::getValue() {
    int value = 0;
    switch (op) {
        case SUB:
            value = -(expr->getValue());
            break;
        case NOT:
            value = !(expr->getValue());
            break;
    }
    return value;
}

void FuncExpr::output(int level) {

}

void Constant::output(int level) {

}

int Constant::getValue() {
    return ((ConstantSymbolEntry*)symbolEntry)->getValue();
}

int Id::getValue() {
    return ((IdentifierSymbolEntry*)symbolEntry)->getValue();
}

void Id::output(int level) {
    std::string name, type;
    int scope;
    if (symbolEntry) {
        name = symbolEntry->toStr();
        type = symbolEntry->getType()->toStr();
        scope = dynamic_cast<IdentifierSymbolEntry*>(symbolEntry)->getScope();
        fprintf(yyout, "%*cId\tname: %s\tscope: %d\ttype: %s\n", level, ' ', name.c_str(), scope, type.c_str());
        if (arrayIndices) {
            ExprNode* temp = arrayIndices;
            int i = 0;
            while (temp) {
                temp->output(level + 4 + 4 * i++);
                temp = (ExprNode*)(temp->getNext());
            }
        }
    }
}

void ArrayInitList::output(int level) {

}

void ArrayInitList::addChildExpr(ExprNode* expr) {
    //增加子表达式
    childExprCount++;
    if (!this->expr) 
        this->expr = expr;
    else 
        this->expr->setNext(expr);
    
}

bool ArrayInitList::isFull() {
    ArrayType* type = (ArrayType*)(this->symbolEntry->getType());
    return childExprCount == type->getLength();
}

void ArrayInitList::paddingArray() {
    Type* elementType = ((ArrayType*)(this->getType()))->getElementType();
    if (elementType->isArray()) {
        while (!this->isFull())
            this->addChildExpr(new ArrayInitList(new ConstantSymbolEntry(elementType)));
        ExprNode* temp = this->expr;
        while (temp) {
            ((ArrayInitList*)temp)->paddingArray();
            temp = (ExprNode*)(temp->getNext());
        }
    }else if (elementType->isInt()) {
        while (!this->isFull())
            this->addChildExpr(new Constant(new ConstantSymbolEntry(elementType, 0)));
        return;
    }
}

void Int2BoolExpr::output(int level) {
    fprintf(yyout, "%*cImplictCastExpr\ttype: %s to %s\n", level, ' ', expr->getType()->toStr().c_str(), type->toStr().c_str());
    this->expr->output(level + 4);
}

void CompoundStmt::output(int level) {

}

void SeqNode::output(int level) {

}

void DeclStmt::output(int level) {

}

void IfStmt::output(int level) {

}

void IfElseStmt::output(int level) {

}

void WhileStmt::output(int level) {

}
void BreakStmt::output(int level) {

}

void ContinueStmt::output(int level) {

}

void ReturnStmt::output(int level) {

}

void AssignStmt::output(int level) {

}

void ExprStmt::output(int level) {

}

void FunctionDef::output(int level) {
   
}